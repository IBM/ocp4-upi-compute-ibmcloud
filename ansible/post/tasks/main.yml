---
- name: Post Installation Tasks (Approving CSRs, Setting up Node Labels)
  hosts: all
  vars_files:
    - ../vars/main.yml

  tasks:
  - name: Install Pre-requisites
    pip:
      name:
        - kubernetes
        - openshift

  - name: Get CSRs
    shell: |
      oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name'
    register: csr_list

  - name: Print Pending CSRs
    debug:
      msg: "Pending CSR List is : {{ csr_list.stdout }}"

  # Run approve CSR command till CSR list is empty.
  - name: Approve Worker CSRs
    shell: |
      for i in $(oc get csr | grep -i pending | awk '{ print $1 }')
      do
        oc adm certificate approve $i
      done 
      oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name'
    register: csr_list
    until: csr_list.stdout == ""
    retries: 5
    delay: 40
    when: worker_count|int > 0

  - name: Wait for 10 seconds before checking Ready state for Intel worker node/s
    pause:
      seconds: 10

  # Run approve command again and wait till we have all powervs worker/s with Ready status. 'xargs -r ' is used to ignore empty stdin.
  - name: Check Ready state for Intel Worker Node
    shell: "oc get csr -ojson | jq -r '.items[] | select(.status == {} ) | .metadata.name' | xargs -r oc adm certificate approve && oc get nodes -l kubernetes.io/arch=amd64 | grep -w worker | grep -w Ready | wc -l"
    register: ready_count_result
    until: ready_count_result.stdout.find(worker_count) != -1
    retries: 50
    delay: 30
    when: worker_count|int > 0

  - name: Get Nodes with amd64 architecture
    shell: "oc get nodes -l kubernetes.io/arch=amd64 | awk '(NR>1) { print $1 }'"
    register: node_names

  - name: Print Node names with amd64 architecture
    debug:
      msg: "Nodes with amd64 : {{ node_names.stdout_lines }}"

  - name: Add labels defined in node_labels to amd64 Nodes
    kubernetes.core.k8s:
      state: present
      kind: Node
      name: "{{ item }}"
      definition:
        metadata:
          labels: "{{ node_labels }}"
    with_items: "{{ node_names.stdout_lines }}"
